
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { UserRole } from '@/types';

const SUPABASE_URL = "https://lhwljjaxgzclwhzemmdc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxod2xqamF4Z3pjbHdoemVtbWRjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4NzQwMjgsImV4cCI6MjA2MDQ1MDAyOH0.2fuzEPTQRy51Jxc9Pn0UGuij1TnQzuOVWh8W9p0cnA8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Extended types for tables that aren't properly defined in the generated types
export type ProfilesRow = {
  id: string;
  username: string;
  role: UserRole;
  created_at?: string;
  email?: string;
};

// Helper functions for safely querying tables with proper types
export const profilesTable = () => {
  // Use type assertion to bypass TypeScript's type checking for the Supabase client
  // This is necessary because the auto-generated types don't properly recognize our tables
  return supabase.from('profiles') as unknown as {
    select: (columns?: string) => {
      eq: (column: string, value: string) => {
        single: () => Promise<{ data: ProfilesRow | null, error: any }>;
        maybeSingle: () => Promise<{ data: ProfilesRow | null, error: any }>;
      };
    };
    update: (data: Partial<ProfilesRow>) => {
      eq: (column: string, value: string) => Promise<{ data: any, error: any }>;
    };
  };
};
